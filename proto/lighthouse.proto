package lighthouse;

import "soapbox.proto";


// To be transformed to GeoJson - ex)  {"location" : [-71.34, 41.12]}
// See http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-geo-point-type.html
message Location {
    required double lon = 1;
    required double lat = 2;
}

message Content {

    // Id - not required at creation time; assigned by server
    optional string id = 1;

    // MIME type. e.g. image/jpeg, image/png, video/mp4
    required string type = 2;

    // Content data bytes
    optional bytes data = 3;

    // Or url as content - link sharing or content in cdn.
    optional string url = 4;
}

message BeaconAdvertisement {

	// For IBeacon spec by AAPL
	message IBeacon {
		required bytes uuid = 1;
		optional int32 major = 2;
		optional int32 minor = 3;
	}
	optional IBeacon ibeacon = 1;

	// For supporting generic BLE mac address as id
	optional string ble_device = 2;
}

// Hardware profile
message BeaconDeviceProfile {
	required bytes hardware_id = 1;
	required string local_name = 2;
	required bytes password = 3;
	required BeaconAdvertisement advertise_info = 4;
	optional int32 tx_power = 5;
	optional int32 tx_frequency = 6;
}

// Summary of a beacon -- this is shared with mobile client.
message BeaconSummary {

	// Unique identifier from the hardware
	required string id = 1;

	// How this beacon advertises itself
	required BeaconAdvertisement advertise_info = 2;

	// Install date, unix time
	required double installed_timestamp = 3;

	// Where the beacon is installed
	required Location location = 4;

	// Battery level in percentage
	optional int32 battery = 5;

	// Owner of the beacon -- first user who provisioned a hardware beacon
	// Ownership can be transferred by releasing the beacon which will cause
	// a deletion of this record.
	required soapbox.UserRef owner = 6;

	// At least one label to establish the context of the beacon.  For v1, only 1 label.
	repeated string labels = 7;

	// For displaying the beacon icon/ logo etc.
	optional Content avatar = 8;
	optional Content avatar_small = 9;
}

// Detail beacon info -- server side; contains history, device profile, etc.
message Beacon {

	required string id = 1;

	required BeaconSummary summary = 2;

	// Device programming history to support reseting of beacons on release or rollbacks.
	// Assumption: this doesn't happen often so a linear history can be stored in-place.
	// This may not be sent to a viewing mobile client.
	repeated BeaconDeviceProfile history = 3;

	// Access control list
	required string acl = 4;
}

message Acl {
	optional string id = 1;
	required string name = 2;
	repeated soapbox.UserRef users = 3;
}

message BeaconPost {

	// Id - not required at creation time.  Assigned by server
	optional string id = 1;

	// List of beacon ids to attach the post
	repeated string beacons = 2;

	// Optional.  If len(audience) is zero, the message is intended
	// only for the author (as self reminder).  This list is used
	// to filter and target delivery.  There are corresponding 'public'
	// or 'group' UserRef to model public or group posts.
	repeated soapbox.UserRef audience = 4;

	// Actual content / post itself
	required soapbox.Post post = 5;

	// Short url
	optional string short_url = 6;
}
