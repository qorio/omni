// Code generated by protoc-gen-go.
// source: lighthouse.proto
// DO NOT EDIT!

/*
Package lighthouse is a generated protocol buffer package.

It is generated from these files:
	lighthouse.proto

It has these top-level messages:
	Location
	Content
	IBeacon
	BeaconAdvertisement
	DeviceProfile
	Beacon
*/
package lighthouse

import proto "code.google.com/p/goprotobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// To be transformed to GeoJson - ex)  {"location" : [-71.34, 41.12]}
// See http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-geo-point-type.html
type Location struct {
	Lon              *float64 `protobuf:"fixed64,1,req,name=lon" json:"lon,omitempty" bson:",omitempty"`
	Lat              *float64 `protobuf:"fixed64,2,req,name=lat" json:"lat,omitempty" bson:",omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}

func (m *Location) GetLon() float64 {
	if m != nil && m.Lon != nil {
		return *m.Lon
	}
	return 0
}

func (m *Location) GetLat() float64 {
	if m != nil && m.Lat != nil {
		return *m.Lat
	}
	return 0
}

type Content struct {
	// Id - not required at creation time; assigned by server
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty" bson:",omitempty"`
	// MIME type. e.g. image/jpeg, image/png, video/mp4
	Type *string `protobuf:"bytes,2,req,name=type" json:"type,omitempty" bson:",omitempty"`
	// Content data bytes
	Data []byte `protobuf:"bytes,3,opt,name=data" json:"data,omitempty" bson:",omitempty"`
	// Or url as content - link sharing or content in cdn.
	Url              *string `protobuf:"bytes,4,opt,name=url" json:"url,omitempty" bson:",omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}

func (m *Content) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Content) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Content) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Content) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

type IBeacon struct {
	Uuid             []byte `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty" bson:",omitempty"`
	Major            *int32 `protobuf:"varint,2,opt,name=major" json:"major,omitempty" bson:",omitempty"`
	Minor            *int32 `protobuf:"varint,3,opt,name=minor" json:"minor,omitempty" bson:",omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IBeacon) Reset()         { *m = IBeacon{} }
func (m *IBeacon) String() string { return proto.CompactTextString(m) }
func (*IBeacon) ProtoMessage()    {}

func (m *IBeacon) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *IBeacon) GetMajor() int32 {
	if m != nil && m.Major != nil {
		return *m.Major
	}
	return 0
}

func (m *IBeacon) GetMinor() int32 {
	if m != nil && m.Minor != nil {
		return *m.Minor
	}
	return 0
}

type BeaconAdvertisement struct {
	// For IBeacon spec by AAPL
	Ibeacon *IBeacon `protobuf:"bytes,1,opt,name=ibeacon" json:"ibeacon,omitempty" bson:",omitempty"`
	// For supporting generic BLE mac address as id
	BleDevice        *string `protobuf:"bytes,2,opt,name=ble_device" json:"ble_device,omitempty" bson:",omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BeaconAdvertisement) Reset()         { *m = BeaconAdvertisement{} }
func (m *BeaconAdvertisement) String() string { return proto.CompactTextString(m) }
func (*BeaconAdvertisement) ProtoMessage()    {}

func (m *BeaconAdvertisement) GetIbeacon() *IBeacon {
	if m != nil {
		return m.Ibeacon
	}
	return nil
}

func (m *BeaconAdvertisement) GetBleDevice() string {
	if m != nil && m.BleDevice != nil {
		return *m.BleDevice
	}
	return ""
}

// Hardware profile
type DeviceProfile struct {
	Timestamp        *float64             `protobuf:"fixed64,1,req,name=timestamp" json:"timestamp,omitempty" bson:",omitempty"`
	HardwareId       []byte               `protobuf:"bytes,2,req,name=hardware_id" json:"hardware_id,omitempty" bson:",omitempty"`
	LocalName        *string              `protobuf:"bytes,3,req,name=local_name" json:"local_name,omitempty" bson:",omitempty"`
	Password         []byte               `protobuf:"bytes,4,req,name=password" json:"password,omitempty" bson:",omitempty"`
	AdvertiseInfo    *BeaconAdvertisement `protobuf:"bytes,5,req,name=advertise_info" json:"advertise_info,omitempty" bson:",omitempty"`
	TxPower          *int32               `protobuf:"varint,6,opt,name=tx_power" json:"tx_power,omitempty" bson:",omitempty"`
	TxFrequency      *int32               `protobuf:"varint,7,opt,name=tx_frequency" json:"tx_frequency,omitempty" bson:",omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *DeviceProfile) Reset()         { *m = DeviceProfile{} }
func (m *DeviceProfile) String() string { return proto.CompactTextString(m) }
func (*DeviceProfile) ProtoMessage()    {}

func (m *DeviceProfile) GetTimestamp() float64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *DeviceProfile) GetHardwareId() []byte {
	if m != nil {
		return m.HardwareId
	}
	return nil
}

func (m *DeviceProfile) GetLocalName() string {
	if m != nil && m.LocalName != nil {
		return *m.LocalName
	}
	return ""
}

func (m *DeviceProfile) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *DeviceProfile) GetAdvertiseInfo() *BeaconAdvertisement {
	if m != nil {
		return m.AdvertiseInfo
	}
	return nil
}

func (m *DeviceProfile) GetTxPower() int32 {
	if m != nil && m.TxPower != nil {
		return *m.TxPower
	}
	return 0
}

func (m *DeviceProfile) GetTxFrequency() int32 {
	if m != nil && m.TxFrequency != nil {
		return *m.TxFrequency
	}
	return 0
}

// Summary of a beacon -- this is shared with mobile client.
type Beacon struct {
	// Unique identifier from the hardware
	HardwareId *string `protobuf:"bytes,1,req,name=hardware_id" json:"hardware_id,omitempty" bson:",omitempty"`
	// How this beacon advertises itself
	AdvertiseInfo *BeaconAdvertisement `protobuf:"bytes,2,req,name=advertise_info" json:"advertise_info,omitempty" bson:",omitempty"`
	// Install date, unix time
	InstalledTimestamp *float64 `protobuf:"fixed64,3,req,name=installed_timestamp" json:"installed_timestamp,omitempty" bson:",omitempty"`
	// Where the beacon is installed
	Location *Location `protobuf:"bytes,4,req,name=location" json:"location,omitempty" bson:",omitempty"`
	// Battery level in percentage
	Battery *int32 `protobuf:"varint,5,opt,name=battery" json:"battery,omitempty" bson:",omitempty"`
	// Owner of the beacon -- first user who provisioned a hardware beacon
	// Ownership can be transferred by releasing the beacon which will cause
	// a deletion of this record.
	Owner *string `protobuf:"bytes,6,req,name=owner" json:"owner,omitempty" bson:",omitempty"`
	// At least one label to establish the context of the beacon.  For v1, only 1 label.
	Labels []string `protobuf:"bytes,7,rep,name=labels" json:"labels,omitempty" bson:",omitempty"`
	// For displaying the beacon icon/ logo etc.
	Avatar           *Content `protobuf:"bytes,8,opt,name=avatar" json:"avatar,omitempty" bson:",omitempty"`
	AvatarSmall      *Content `protobuf:"bytes,9,opt,name=avatar_small" json:"avatar_small,omitempty" bson:",omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Beacon) Reset()         { *m = Beacon{} }
func (m *Beacon) String() string { return proto.CompactTextString(m) }
func (*Beacon) ProtoMessage()    {}

func (m *Beacon) GetHardwareId() string {
	if m != nil && m.HardwareId != nil {
		return *m.HardwareId
	}
	return ""
}

func (m *Beacon) GetAdvertiseInfo() *BeaconAdvertisement {
	if m != nil {
		return m.AdvertiseInfo
	}
	return nil
}

func (m *Beacon) GetInstalledTimestamp() float64 {
	if m != nil && m.InstalledTimestamp != nil {
		return *m.InstalledTimestamp
	}
	return 0
}

func (m *Beacon) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Beacon) GetBattery() int32 {
	if m != nil && m.Battery != nil {
		return *m.Battery
	}
	return 0
}

func (m *Beacon) GetOwner() string {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return ""
}

func (m *Beacon) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Beacon) GetAvatar() *Content {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *Beacon) GetAvatarSmall() *Content {
	if m != nil {
		return m.AvatarSmall
	}
	return nil
}

func init() {
}
