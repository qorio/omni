package passport;


message PassportCredential {
	optional string password = 1;
	optional string email = 2;
	optional string phone = 3;
	optional string username = 4;
}

// OAuth2 identity here assumes that the
// client has performed auth with the provider
// and the provider has granted an access token.
// The access token is then verified on the server
// side via the providers server api.  Once the
// access token is verified, another token for
// accessing passport-authenticated systems is
// issued.
message OAuth2Credential {
	required string provider = 1;
	required string id = 2;
	optional string access_token = 3;
}


message AuthResponse {
	required string token = 1;
}

message Login {
	optional string id = 1;
	optional string service = 2;

	message Location {
    		required double lon = 1;
    		required double lat = 2;
    	}
	optional Location location = 3;

	optional PassportCredential native = 4;
	optional OAuth2Credential oauth2 = 5;
}


message Blob {
	required string type = 1;
	required bytes data = 2;
}

message Attribute {
	enum Type {
	     STRING = 1;
	     NUMBER = 2;
	     BOOL = 3;
	     BLOB = 4;
	}
	required Type type = 1;
	required string key = 2;
	optional bool embed_signin_token = 3 [default = false];  // True to include in signin JWT token
	optional string string_value = 4;
	optional double number_value = 5;
	optional bool bool_value = 6;
	optional Blob blob_value = 7;
}

message Service {
	required string id = 1;
	required string status = 2;  // free-form for the service to interpret
	required string accountId = 3;  // account key used by the service
	repeated string scopes = 4; // oauth scopes / permissions
	optional double startTimestamp = 5;
	repeated Attribute attributes = 6;
}

message Account {
	optional string id = 1;
	optional string status = 2;
	required Login primary = 3;
	optional double createdTimestamp = 4; // unix seconds
	repeated Service services = 5;
}

message AccountLogs {
	required string id = 1;
	message Log {
		required double timestamp = 1;
		required string user = 2;
		required string entry = 3;
	}
	repeated Log entries = 2;
}